# -*- coding: utf-8 -*-
"""astarsearch

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l-YvnGyjEcvRu2N_sIpUCTLZi6IDFAAS
"""

from queue import PriorityQueue

# Fungsi untuk algoritma A* Graph Search
def a_star_search(graph, start, goal, heuristic):
    frontier = PriorityQueue()
    frontier.put((0, start))
    explored = set()
    path = {}
    g_cost = {start: 0}

    while not frontier.empty():
        current_priority, current = frontier.get()

        if current == goal:
            print("Simpul tujuan sudah ditemukan!")
            route = reconstruct_path(path, start, goal)
            print("Jalur terbaik:", route)
            return route

        explored.add(current)

        for neighbor, cost in graph[current].items():
            tentative_g_cost = g_cost[current] + cost

            if neighbor not in explored or tentative_g_cost < g_cost.get(neighbor, float('inf')):
                g_cost[neighbor] = tentative_g_cost
                f_cost = tentative_g_cost + heuristic[neighbor]
                frontier.put((f_cost, neighbor))
                path[neighbor] = current

    print("Simpul tujuan tidak ditemukan!")
    return None

def reconstruct_path(path, start, goal):
    current = goal
    route = [current]
    while current != start:
        current = path[current]
        route.append(current)
    route.reverse()
    return route

# Daftar heuristik untuk setiap simpul
heuristic = {
    'A': 9,
    'B': 4,
    'C': 2,
    'D': 5,
    'E': 3,
    'S': 7,
    'G': 0
}

# Graf (dalam bentuk adjacency list dengan bobot)
graph = {
    'S': {'A': 3, 'B': 2},
    'A': {'B': 3, 'D': 5},
    'B': {'C': 2, 'D': 5},
    'C': {'D': 3, 'G': 4},
    'D': {'G': 1},
    'G': {}
}

# Titik awal dan tujuan
start_node = 'S'
goal_node = 'G'

a_star_search(graph, start_node, goal_node, heuristic)