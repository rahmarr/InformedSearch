# -*- coding: utf-8 -*-
"""greedy_best_first_search

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BLh7weYgXe4ZkEAj8J3L0a_aQSgvUryw
"""

from queue import PriorityQueue

def greedy_search(graph, heuristic, start, goal):
    frontier = PriorityQueue()
    frontier.put((heuristic[start], start))
    explored = set()
    path = {}

    while not frontier.empty():
        _, current = frontier.get()

        if current == goal:
            print("Simpul tujuan ditemukan!")
            route = reconstruct_path(path, start, goal)
            print("Jalur terbaik:", route)
            return route

        explored.add(current)

        for neighbor in graph[current]:
            if neighbor not in explored:
                frontier.put((heuristic[neighbor], neighbor))
                path[neighbor] = current

    print("Simpul tujuan tidak ditemukan!")
    return None

def reconstruct_path(path, start, goal):
    current = goal
    route = [current]
    while current != start:
        current = path[current]
        route.append(current)
    route.reverse()
    return route

# Heuristic values from the image
heuristic = {
    'S': 6, 'A': 4, 'B': 3, 'C': 3, 'D': 1, 'G': 0
}

# Graph structure from the image
graph = {
    'S': ['A', 'B'],
    'A': ['B', 'D'],
    'B': ['C', 'D'],
    'C': ['D', 'G'],
    'D': ['G'],
    'G': []
}

# Starting and goal nodes
start_node = 'S'
goal_node = 'G'

greedy_search(graph, heuristic, start_node, goal_node)